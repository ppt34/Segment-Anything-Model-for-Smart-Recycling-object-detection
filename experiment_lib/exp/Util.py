
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/09_Util.ipynb

import numpy as np
from torch import tensor
import torchvision
from torchvision import transforms
import matplotlib.pyplot as plt

def imshow(god, inp, title=None, pred=None, loss=None):
    inp = inp.permute(1, 2, 0)

    normalize_transform = next((t for t in god.data_transforms['train'].transforms if type(t) == transforms.Normalize), None)
    if normalize_transform:
        mean = tensor(normalize_transform.mean)
        std = tensor(normalize_transform.std)
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1)

    plt.figure(figsize=(12,6))
    plt.imshow(inp)
    if title is not None: plt.title(title)
    if pred is not None: print('predictions:', pred)
    if loss is not None: print('loss:', loss)
    plt.pause(0.001)

def show_dl_images(god, dl, n=8):
    inputs, classes = [], []
    while len(inputs) < n:
        inp, c = next(iter(dl))
        inputs.extend(inp)
        classes.extend(c)
    inputs, classes = inputs[:n], classes[:n]
    out = torchvision.utils.make_grid(inputs)
    title=[god.config['id2label'][x.item()] for x in classes]
    imshow(god, out, title)